version: '3.8'

services:
  run-api-locally:
    container_name: deepstroy-api-local-starter
    restart: "no"
    image: tianon/true
    depends_on:
      - deepstroy-api
      - deepstroy-api-postgres
      - deepstroy-api-rabbitmq
      - deepstroy-api-s3

  deepstroy-api:
    container_name: deepstroy-api
    image: deepstroy-api:latest
    restart: unless-stopped
    networks:
      - deepstroy-net
    build:
      context: .
    command: poetry run flask run
    volumes:
      - .:/app-workspace
    ports:
      - "9200:5000"
    env_file:
      - .env

  deepstroy-api-postgres:
    container_name: deepstroy-api-postgres
    image: postgres:13.3-alpine
    restart: always
    volumes:
      - deepstroy-api-postgres-data:/var/lib/postgresql/data/
    healthcheck:
      test: "pg_isready -U $$POSTGRES_USER"
      timeout: 10s
      interval: 10s
      retries: 3
    networks:
      - deepstroy-net
    env_file:
      - .env
    ports:
      - "9210:5432"


  deepstroy-api-rabbitmq:
    container_name: deepstroy-api-rabbitmq
    image: rabbitmq:3.9.13-management-alpine
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - deepstroy-net
    env_file:
      - .env
    ports:
      - "9213:5672"
      - "9214:15672"

  deepstroy-api-s3:
    container_name: deepstroy-api-s3
    image: minio/minio:latest
    command: server /data --console-address ":7001"
    restart: always
    ports:
      - "9211:9000"
      - "9212:7001"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    env_file:
      - .env
    volumes:
      - ./s3-data:/data
    networks:
      - deepstroy-net


volumes:
  deepstroy-api-postgres-data:

networks:
  deepstroy-net:
    driver: bridge
